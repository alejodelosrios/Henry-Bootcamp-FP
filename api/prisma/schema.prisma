generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//PROYECTO FINAL

model User {
  id        Int        @id @default(autoincrement())
  email     String     @unique
  password  String     
  role      String     
  applicant Applicant?
  company   Company?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Applicant {
  id            Int            @id @default(autoincrement())
  //RELACION CON USER
  userId        Int            @unique @default(1)
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  //=============
  firstName     String
  lastName      String
  about         String
  phoneNumber   String
  country       String
  image         String
  showImage     Boolean
  experience    Experience[]
  education     Education[]
  languages     Language[]
  skillTags     Tag[]
  notifications Notification[]
  followed      Company[]
  postulations  ApplicantPool[]
  favorites     Post[]         @relation("_UserToFavorites")
}

model Company {
  id              Int            @id @default(autoincrement())
  //RELACION CON USER
  userId          Int            @unique @default(1)
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  //=============
  name            String
  legalName       String
  stin            String
  companyLogo     String
  location        String
  values          String[]
  aboutValues     String
  about           String
  mission         String
  vision          String
  rating          Int?      @default(0)
  accountManagers String[]
  images          Image[]
  notifications   Notification[]
  reviews         Review[]
  posts           Post[]
  followers       Applicant[]
}

model Image {
  id              Int            @id @default(autoincrement())
  name            String?
  url             String
  companyId       Int
  company         Company       @relation(fields: [companyId], references: [id])
}

model Post {
  id           Int         @id @default(autoincrement())
  //RELACION CON COMPANY
  companyId    Int
  company      Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)
  //=============
  title        String
  description  String
  location     String
  modality     String
  contractType String
  salary       String
  startDate    String
  endDate      String
  companyRating Int?      @default(0)
  tags         String[]
  applicants   ApplicantPool[]
  favoritedBy  Applicant[] @relation("_UserToFavorites")
  //RELACION CON CATEGORY
  categoryId   Int
  category     Category    @relation(fields: [categoryId], references: [id])
  //=============
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model ApplicantPool {
  id            Int           @id @default(autoincrement())
  status        String?       @default("inProcess")
  applicant     Applicant     @relation(fields: [applicantId], references: [id])
  applicantId   Int
  post          Post          @relation(fields: [postId], references: [id])
  postId        Int
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Experience {
  id          Int       @id @default(autoincrement())
  position    String
  company     String
  startDate   String
  endDate     String?
  description String
  //RELACION CON APPLICANT
  applicantId Int
  applicant   Applicant @relation(fields: [applicantId], references: [id], onDelete: Cascade)
  //=============
}

model Education {
  id          Int       @id @default(autoincrement())
  degree      String
  institution String
  startDate   String
  endDate     String?
  description String
  //RELACION CON APPLICANT
  applicantId Int
  applicant   Applicant @relation(fields: [applicantId], references: [id], onDelete: Cascade)
  //=============
}

model Language {
  id          Int       @id @default(autoincrement())
  language    String
  level       String
  //RELACION CON APPLICANT
  applicantId Int
  applicant   Applicant @relation(fields: [applicantId], references: [id], onDelete: Cascade)
  //=============
}

model Review {
  id          Int     @id @default(autoincrement())
  description String
  score       Int
  //RELACION REVIEWS CON COMPANIA
  companyId   Int
  company     Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  //=============
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String
  posts Post[]
}

model Tag {
  id        Int         @id @default(autoincrement())
  name      String
  applicant Applicant[]
}

model Notification {
  id          Int               @id @default(autoincrement())
  message     String
  viewed      Boolean?          @default(false)
  type        String

  // typeId      Int    //la relacion esta debajo por si despues queremos agregarla de nuevo

  //=============
  //RELACION NOTIFICACIONES Y APPLICANT
  postId      Int
  //=============
  //RELACION NOTIFICACIONES Y APPLICANT
  applicantId Int?
  applicant   Applicant?        @relation(fields: [applicantId], references: [id])
  //=============
  //RELACION NOTIFICACIONES Y COMPANY
  companyId   Int?
  company     Company?          @relation(fields: [companyId], references: [id])
  //=============
}

// model notificationTypes {
//   id           Int            @id @default(autoincrement())
//   name         String
//   notification Notification[]
// }

model News {
  id          Int    @id @default(autoincrement())
  image       String
  title       String
  description String
}
